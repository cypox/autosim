#!/usr/bin/python3
import os

def generate_tcl_script(path = '/home/cy/dac-2019/autosim', filename = 'script.tcl', top = 'sq_mult'):
  f = open(os.path.join(path, filename), 'w')

  part = 'xc7z020clg484-1'
  board = 'em.avnet.com:zed:part0:1.3'
  parent = os.path.join(path, 'project')
  project = os.path.join(parent, 'project.xpr')
  source_dir = path

  f.write('set part {}\n'.format(part))
  f.write('set board {}\n'.format(board))
  f.write('set parent {}\n'.format(parent))
  f.write('set project {}\n'.format(project))
  f.write('set top {}\n'.format(top))
  f.write('set source_dir {}\n'.format(source_dir))
  f.write('\n')
  f.write('proc create_report { reportName command } {\n')
  f.write('  set status "."\n')
  f.write('  append status $reportName ".fail"\n')
  f.write('  if { [file exists $status] } {\n')
  f.write('    eval file delete [glob $status]\n')
  f.write('  }\n')
  #f.write('  send_msg_id runtcl-4 info "Executing : $command"\n')
  f.write('  set retval [eval catch { $command } msg]\n')
  f.write('  if { $retval != 0 } {\n')
  f.write('    set fp [open $status w]\n')
  f.write('    close $fp\n')
  f.write('    send_msg_id runtcl-5 warning "$msg"\n')
  f.write('  }\n')
  f.write('}\n')
  f.write('\n')
  f.write('exec rm -rf $parent\n')
  f.write('exec mkdir $parent\n')
  f.write('cd $parent\n')
  f.write('\n')
  f.write('create_project -in_memory -part $part -quiet\n')
  f.write('\n')
  f.write('set_property webtalk.parent_dir $parent [current_project]\n')
  f.write('set_property parent.project_path $project [current_project]\n')
  f.write('set_property default_lib xil_defaultlib [current_project]\n')
  f.write('set_property target_language Vhdl [current_project]\n')
  f.write('set_property board_part $board [current_project]\n')
  f.write('\n')
  f.write('foreach file [glob -nocomplain -directory $source_dir *.vhd] {\n')
  f.write('  file copy $file $parent\n')
  f.write('  read_vhdl -library xil_defaultlib $file\n')
  f.write('}\n')
  f.write('\n')
  f.write('synth_design -top $top -part $part -quiet\n')
  f.write('\n')
  f.write('create_report "synth_utilization" "report_utilization -file utilization_synth.rpt -pb utilization_synth.pb -quiet"\n')
  f.write('\n')
  f.write('opt_design -quiet\n')
  f.write('\n')
  f.write('create_report "impl_drc" "report_drc -file drc_opted.rpt -pb drc_opted.pb -rpx drc_opted.rpx -quiet"\n')
  f.write('\n')
  f.write('place_design -quiet\n')
  f.write('\n')
  f.write('create_report "place_io" "report_io -file io_placed.rpt -quiet"\n')
  f.write('create_report "place_utilization" "report_utilization -file utilization_placed.rpt -pb utilization_placed.pb -quiet"\n')
  f.write('create_report "place_control" "report_control_sets -verbose -file control_sets_placed.rpt -quiet"\n')
  f.write('\n')
  f.write('route_design -quiet\n')
  f.write('\n')
  f.write('create_report "route_drc" "report_drc -file drc_routed.rpt -pb drc_routed.pb -rpx drc_routed.rpx -quiet"\n')
  f.write('create_report "route_methodology" "report_methodology -file methodology_drc_routed.rpt -pb methodology_drc_routed.pb -rpx methodology_drc_routed.rpx -quiet"\n')
  f.write('create_report "route_power" "report_power -file power_routed.rpt -pb power_summary_routed.pb -rpx power_routed.rpx -quiet"\n')
  f.write('create_report "route_route_status" "report_route_status -file route_status.rpt -pb route_status.pb -quiet"\n')
  f.write('create_report "route_timing_summary" "report_timing_summary -max_paths 10 -file timing_summary_routed.rpt -rpx timing_summary_routed.rpx -warn_on_violation -quiet"\n')
  f.write('create_report "route_incremental_reuse" "report_incremental_reuse -file incremental_reuse_routed.rpt -quiet"\n')
  f.write('create_report "route_clock_utilization" "report_clock_utilization -file clock_utilization_routed.rpt -quiet"\n')
  f.write('\n')
  f.write('cd ..\n')

  f.close()
